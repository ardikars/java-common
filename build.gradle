
/**
 * Copyright (C) 2015-2018 Jxnet
 */

buildscript {

    apply from: "${rootDir}/gradle/configure.gradle"

    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.2'
    }

}

allprojects {

    apply plugin: 'java'
    apply plugin: 'signing'
    apply plugin: 'maven'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.spotbugs'

    group = "${GROUP}"
    version = "${VERSION}"

    sourceCompatibility = "${JAVA_VERSION}"
    targetCompatibility = "${JAVA_VERSION}"

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    repositories {
        jcenter()
    }

    configurations.archives.artifacts.with { archives ->
        def jarArtifact
        archives.each {
            if (it.file =~ 'jar' && project.name == "${rootProject.name}") {
                jarArtifact = it
            }
        }
        remove(jarArtifact)
    }

    javadoc {
        def currentYear = Calendar.getInstance().get Calendar.YEAR
        options.with {
            locale 'en_US'
            encoding 'UTF-8'
            charSet 'UTF-8'
            author true
            windowTitle "${NAME} ${project.version}"
            header "${NAME} ${project.version}"
            docTitle "${NAME} ${project.version} API documentation"
            footer "${PROJECT_REPOSITORY}"
            bottom "Copyright &copy; 2017 - ${currentYear} ardikars.com. All rights reserved."
            showFromProtected()
			addStringOption 'Xdoclint:all,-reference', '-quiet'
        }
    }

    spotbugs {
        ignoreFailures = false
        sourceSets = [sourceSets.main]
        reportsDir = file("$project.buildDir/reports/findbugs")
        effort = "max"
        excludeFilter rootProject.file('gradle/resources/findbugs/findbugs-exclude.xml')
//        spotbugsMain {
//            reports {
//                xml.enabled = false
//                html.enabled = true
//            }
//        }
        toolVersion "${SPOTBUGS_VERSION}"
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    tasks.withType(JavaCompile) {
		//options.compilerArgs << "-Xlint:unchecked" << "-Werror"
    }

    artifacts {
        archives jar, sourcesJar, javadocJar
    }

    signing {
        required { gradle.taskGraph.hasTask('uploadArchives') || gradle.taskGraph.hasTask('bintrayUpload') }
        sign configurations.archives
    }

    install {
        System.setProperty('maven.repo.local', "${MAVEN_LOCAL_REPOSITORY}")
        repositories.mavenInstaller {
            pom.project pom_project
            pom.project {

                name = project.name

                if (project.description == null || project.description.isEmpty()) {
                    description = "${DESCRIPTION}"
                } else {
                    description = project.description
                }

                if (project.name.equals('common')) {
                    dependencyManagement {
                        dependencies bom_dependencies
                    }
                }

            }
        }
    }

    uploadArchives {
        repositories.mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: defaultBlank({ sonatypeUser }), password: defaultBlank({ sonatypePass }))
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: defaultBlank({ sonatypeUser }), password: defaultBlank({ sonatypePass }))
            }
            pom.project pom_project
            pom.project {

                name = project.name

                if (project.description == null || project.description.isEmpty()) {
                    description = "${DESCRIPTION}"
                } else {
                    description = project.description
                }

                if (project.name.equals('common')) {
                    dependencyManagement {
                        dependencies bom_dependencies
                    }
                }

            }
        }
    }

    bintray {
        user = defaultBlank({ bintrayUser })
        key = defaultBlank({ bintrayPass })
        configurations = ['archives']
        dryRun = false
        publish = true
        override = false
        pkg {
            repo = 'maven'
            name = "${GROUP}"
            desc = "${DESCRIPTION}"
            licenses = ["${LICENSE_NAME}"]
            vcsUrl = "${PROJECT_REPOSITORY}"
            version {
                name = project.version
                vcsTag = project.version
                gpg {
                    sign = true
                    passphrase = defaultBlank({ signing.password })
                }
                mavenCentralSync {
                    sync = true
                    user = defaultBlank({ sonatypeUser })
                    password = defaultBlank({ sonatypePass })
                    close = '1'
                }
            }
        }
    }

    clean {
        file("${rootDir}/${project.name}/obj").deleteDir()
        file("${rootDir}/${project.name}/out").deleteDir()
    }

}

subprojects.each {
    subproject -> evaluationDependsOn(subproject.path)
}

javadoc.dependsOn subprojects.tasks['javadoc']

javadocJar {
    subprojects.each { subproject ->
        classifier = 'javadoc'
        from subproject.javadoc
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    subprojects.each { subproject ->
        if (subproject.name != "${rootProject.name}") {
            sourceSets subproject.sourceSets.main
        }
    }
    reports {
        xml.enabled false
        html.enabled true
        csv.enabled false
    }
}

test {
    testLogging {
        showStandardStreams = true
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

task dist(type: Zip, dependsOn: build) {

    archiveName = "${NAME}-${VERSION}.zip"

    subprojects.each { subproject ->
        from subproject.jar.outputs.files
        from subproject.javadocJar.outputs.files
        from subproject.sourcesJar.outputs.files
    }

}

clean {
    dependsOn subprojects.tasks['clean']
    file("${rootDir}/obj").deleteDir()
    file("${rootDir}/out").deleteDir()
}

//task wrapper(type: Wrapper) {
//    distributionUrl = "https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-all.zip"
//}
